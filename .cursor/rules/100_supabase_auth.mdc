# Supabase Auth Integration

## 認証パターン
```typescript
// lib/supabase/client.ts
import { createClientComponentClient } from '@supabase/auth-helpers-nextjs';

export const supabase = createClientComponentClient();

// hooks/use-auth.ts
export function useAuth() {
  const [user, setUser] = useState<User | null>(null);
  const [loading, setLoading] = useState(true);
  // Auth logic
}
```

## 保護されたルート
```typescript
// middleware.ts
export async function middleware(request: NextRequest) {
  const res = NextResponse.next();
  const supabase = createMiddlewareClient({ req: request, res });
  await supabase.auth.getSession();
  return res;
}
```

## データベーススキーマ
```sql
CREATE TABLE user_profiles (
  id UUID REFERENCES auth.users(id) PRIMARY KEY,
  github_username TEXT NOT NULL,
  github_avatar_url TEXT,
  default_repo_owner TEXT,
  default_repo_name TEXT,
  github_access_token TEXT,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);
```

## RLS (Row Level Security)設定
- user_profilesテーブルでRLS有効化
- ユーザーは自分のプロファイルのみ表示/更新可能